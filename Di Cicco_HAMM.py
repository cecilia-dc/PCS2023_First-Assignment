'''
Rosalind HAMM exercise by Di Cicco Cecilia
'''
# Counting Point Mutations

s = 'TGAGCCTTCAAGAGTGAAGCTTCTTATGCGGTCATCACCAGAGACCGCGAGAACTTCGATCCGCGAGCCGACCAACGGGCCTAAACCAAACCTTTGCAAATCTTTTAGTCCCTACAGACTTACTAAGCTCCCCCGGATAGGGTCGAAGGATGCGGGTCACTTTGCAGATTTACTAAAGGTGAAGTCTTGACACTTCGACATTGACTAGATCGTTCGGGTCCCCACGTTTAATCCGCAAGGACATGATGAAAATGGTTACTGACTCTATAGATACGCGTTCGGAGACTTGTCCTGACCTCGGTATTGCGCCAACTCGGGAGCGTAGCCGGGACTGCTAGTAATGAATGCTAGTCAACGGCAGAGACTTGCATTTGGCCGTCGCGTGGCGCTCCACTTTGTAAGTTCCCGCTCGCCAGATTGTGGGCATGGATGTCTGATCAGTTCTGACAATCATCCGCGGAGACCCACCTTTTCCTCTGATCCGTCAAACGCGCGCAGACGAAAAGTCAATAAATTCTATCGCCATTACAGGAACGAGCCATTAATGCCTTTGATTCAAGCTTTAATTAATAAGCCAGTCGACGTGGCAGGCACAGTAGATCGTCGTGCCGCATAGCGTCGCAACCCTTAGAGGCTCTCATCGATAAATACGGCGGAGACCTCAGTGGAGATGAAGGCGGGGAGGCAAGAGGCGGAAAGAGGCACCAGTAGCACAGAACCGGCCACGAGCCTAGTGGTCAGTAAACCACTCCGGAATTGCGCCAACATTTATGGTCCTACCGATCGATGATGTGTGAGCGTGCTGGGCTGACGTATAAACGCTCCGGCCACCCAGCGATCGTAGTCGCGGGACAGAGAAACTACACGCTGAAGAATTGCCCCATGGCTCAGAGAGCCTGAGAGCAATCTTCTGAATTGCGGACGACGAACTGTCGGCGTTGGACCACCAATGCGGCACAATTTTAGTGATGGCGCCTACCAGGAACATTGACC'
t = 'TGACGATAAAATGGTGATGCTTCTGTTAATGTACTCACCGACGACTTGGAGACCTTACAGTCACGAGCAGTCGAGCGTGCCTACAGTAGACCGTTTAAAGTCGTTTTGTTCCTACACTCAATTACCCCTTGATTACATAGGAGTTAGGGACGCGAATCCATTGGATAGCGTATTCCGGGTTTTTTATTGGCTTCTGCCCTATCGATCTCAATTACTCGTCAATTCTTGTGCTCAGGAAGGACCAGGCTGAATTGCTCCAAGTTTTTATTCCCTCGGGTCGTGCGTCATATCAGGACGAATCTTACGGCGCACCTCGTGAGATTCCCCGCCGCACCCAGTTTTTTTCACTGGTCAACTCCCACCGCTCGCTCGTGATCGTCGCGTGCCACGCGAGTGTTGTATCTCCGGGGCCTCGAGCTCAATGGGTTGGGAAGTGATGAGTGGGGCTACTACGTCACGGAGAGATAGCCTAACCTGGGATTTCTCAGAAACGTCGAATCGTAGCCTAATAAAAGTACATCAGCGGGACAGGCTCGCTACACATATAAGGTCAATTGGAGCTTGGAATACTAATTCCTTTGACGTGACACCGTTAGGCTCTAATACTGACGAATCGCTTCAAAATCCTGAGAGCTTGACATCTTCTTTTGACCCGCATAATGCAATGGGGCTGGAGCCATGCAGGCCAGATGCCTAAGCAAGCAAGAGAGTGAGTGGATAGGATACCCTCATAGAGCTCCGATATGAACAACCCAATAGAGGTGACACTTATGTTCCCTCCAATCGATGCACACGCAGTTGGAAACCCCTAGGAATACGCGATCGCGCAACACCCTGATGGTCCGCTGGTACCATTGGAGCAACTCCCTAACGAGTTACTGGAGGTCACAGAAGAACGGCTGGCGTATCGCTATGTTACAAACGAGGCAATCTGGTAGGTTAATCACGCTACTTGAACGCTTCGAGATCCTACGCAAATTTGGGAATTGCCGC'

# Defining the Hamming distance of the two strings s and t
def hamm_distance(s,t):
    if len(s) != len(t): # if the lenghts of s and t differ we can't compute the problem
        return 'Error: The two strings s and t must have same lenght' 
    distance = 0

    for index in range(len(s)):
        if s[index] != t[index]: # if the symbol of string s at position 'index' differs from the symbol of string t at position 'index' the distance increases by 1 each time
            distance += 1
    return distance

distance = hamm_distance(s,t)

print(distance)